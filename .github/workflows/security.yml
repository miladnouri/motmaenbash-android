name: Security CI/CD Pipeline

on:
  push:
    branches: [ main, develop, security-* ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

env:
  JAVA_VERSION: '11'
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Create Firebase config template
      run: |
        mkdir -p app/src/main/res/values
        echo '<?xml version="1.0" encoding="utf-8"?>
        <resources>
          <string name="firebase_project_id">test-project</string>
          <string name="firebase_api_key">test-key</string>
        </resources>' > app/src/main/res/values/firebase_config.xml
    
    - name: Run security unit tests
      run: ./gradlew testDebugUnitTest -PtestFilter=*Security*
    
    - name: Run lint analysis
      run: ./gradlew lintDebug
    
    - name: Run static analysis
      run: ./gradlew spotbugsMain
    
    - name: OWASP Dependency Check
      run: ./gradlew dependencyCheckAnalyze
    
    - name: Build security variant
      run: ./gradlew assembleSecurityDebug
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          app/build/reports/
          build/reports/
          app/build/outputs/lint-results*.html
    
    - name: Comment PR with security status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## ðŸ”’ Security Scan Results\n\n';
          
          try {
            // Read lint results
            const lintResults = fs.readFileSync('app/build/reports/lint-results.txt', 'utf8');
            comment += '### Lint Analysis\n```\n' + lintResults + '\n```\n\n';
          } catch (e) {
            comment += '### Lint Analysis\nâœ… No issues found\n\n';
          }
          
          comment += '### Security Checklist\n';
          comment += '- âœ… Unit tests passed\n';
          comment += '- âœ… Lint analysis completed\n';
          comment += '- âœ… Dependency check completed\n';
          comment += '- âœ… Security build successful\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Run tests and generate coverage
      run: ./gradlew testDebugUnitTest jacocoTestReport
    
    - name: SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew sonarqube

  security-integration:
    name: Security Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        api-level: [21, 29, 31]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
    
    - name: AVD cache
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}
    
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
    
    - name: Run security integration tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: ./gradlew connectedAndroidTest -PtestFilter=*Security*

  vulnerability-scan:
    name: Vulnerability Assessment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: java
        queries: security-extended

  build-and-sign:
    name: Build and Sign APK
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Build release APK
      run: ./gradlew assembleRelease
    
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      with:
        releaseDirectory: app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
    
    - name: Upload signed APK
      uses: actions/upload-artifact@v3
      with:
        name: signed-apk
        path: app/build/outputs/apk/release/app-release-unsigned-signed.apk

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, vulnerability-scan, security-integration]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download security artifacts
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: ./security-reports
    
    - name: Generate security report
      run: |
        echo "# Security Assessment Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Security Scan Status" >> security-report.md
        echo "- Security Tests: ${{ needs.security-scan.result }}" >> security-report.md
        echo "- Vulnerability Scan: ${{ needs.vulnerability-scan.result }}" >> security-report.md
        echo "- Integration Tests: ${{ needs.security-integration.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Security Metrics" >> security-report.md
        echo "- Build Date: $(date)" >> security-report.md
        echo "- Commit: ${{ github.sha }}" >> security-report.md
        echo "- Branch: ${{ github.ref }}" >> security-report.md
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-assessment-report
        path: security-report.md